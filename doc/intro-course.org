#+TITLE: An Introductory Course in Formal Languages and Protocols in Computational Law

This document lives at https://github.com/legalese/legalese.com/blob/master/doc/intro-course.org

* Introduction

This course was designed in mid-2017 to survey the field of computational contracts, which is just now emerging from academia toward industrial practice.

** Audiences

The course is intended for two audiences.

One, the non-technical reader with some experience with the legal profession, considering a career in legal engineering, unafraid to dip a toe into computer science. A bright young law student, perhaps with some natural affinity for programming, who seeks alternatives to the standard future: junior associate, senior associate, partner, corpse.

Two, the technical reader, perhaps a self-taught or [[http://matt.might.net/articles/what-cs-majors-should-know/][classically educated programmer]], who is interested in approaching contract law as a special case of applied computer science.

This is not a bloodless sport. You might have parents or friends who are lawyers. As a computer geek at heart, you might feel a certain competitive urge to show that your magic is as strong as theirs. Nurture this flame. It is an authentic motivation.

There is a third type of audience. Maybe you grew up coding, but now find yourself working in law. Perhaps you are entertaining thoughts about defecting to the other camp where your first love still awaits. We can neither confirm nor deny that any such attempts will succeed. Say nothing, but blink twice if you understand.

** By the end of this course

You will gain passing acquaintance with the foundational technologies, past and current efforts, and leading figures in the field of computational law in general, and computable contracts in particular.

** Course Structure

This is a self-study course. It's mostly readings, web pages, and some videos.

If you get stuck, ask for help on the Legalese slack chat.

* Volume 1 (two days) -- Background Survey

** Motivation and Explication

1. What if we could write contracts (and statutes) the way we do programs? (Not to mention compile, test, debug, and verify ... or even share and sell.)
2. http://compk.stanford.edu/ articulates the vision.
3. Harry Surden (2014) explains computable contracts on his blog ([[http://www.harrysurden.com/wordpress/archives/203][part 1]], [[http://www.harrysurden.com/wordpress/archives/230][part 2]]).
4. Eventually, professional services will be provided around contract drafting. Wait -- law firms already do that! Except, by and large, without technology and tools. Automation is just the first step.
5. Darmstadter, Precision's Counterfeit
6. [[https://papers.ssrn.com/sol3/papers.cfm?abstract_id=332941][Why Contracts are written in 'Legalese', by Claire Hill]]
7. One premise of the approach in this course is that the CS field of [[https://en.wikipedia.org/wiki/Formal_verification][Formal Verification]] has much to offer. See [[https://www.theatlantic.com/technology/archive/2017/09/saving-the-world-from-code/540393/][The Coming Software Apocalypse]].

** A Quick Survey of Prior Art in Computable Contracts

Ready to add some tabs to your browser?

The three most important readings are marked *IMPORTANT* below. If you print anything, print those. Skim everything else, but read those.

Computable contracts is a narrow segment of computational law, which goes back over 30 years. For a sense of the larger field, see [[https://www.researchgate.net/publication/259872879_The_TAXMAN_Project_Towards_a_Cognitive_Theory_of_Legal_Argument][the contents page of Computer Science and Law]] (1979), [[https://drive.google.com/open?id=0BxOaYa8pqqSwNWg4d1lsSGJnSVE][the ICAIL retrospective]] (2012), and [[https://drive.google.com/open?id=0BxOaYa8pqqSwNFlaNEUzd1d3RGc][slides from the intro to AI & Law workshop at ICAIL 2017]].

Meng gave [[https://docs.google.com/presentation/d/1qP7Immmo51Rik9X96KmyZPLi2zC2mGQSTgsWccq3wNA/edit#slide=id.g228038fb28_0_3][a presentation covering some of this material]] at CodeX on 2017-09-09.

*** American Work

1. The earliest work dates back to 1988: skim Ronald Lee's [[https://www.researchgate.net/publication/228185635_A_Logic_Model_for_Electronic_Contracting][A Logic Model for Electronic Contracting]].
2. In the late 1990s and early 2000s, Nick Szabo put forward [[http://nakamotoinstitute.org/contract-language/][a formal language for contracts]].
3. *IMPORTANT* -- In 2011 some Argentinians published [[http://publicaciones.dc.uba.ar/Publications/2011/GMS11/gms_flacos-2011-tr.pdf][FormaLex]]. They [[https://drive.google.com/open?id=0BxOaYa8pqqSwT01LUGdDMjdMRXc][followed up in 2017]].
4. More recently, Flood & Goodenough published [[https://www.financialresearch.gov/working-papers/files/OFRwp-2015-04_Contract-as-Automaton-The-Computational-Representation-of-Financial-Agreements.pdf][Contract as Automaton]] (2015, 2017).
5. In 2016, [[https://www.hklaw.com/Josias-Dewey/][Josias Dewey]] of [[http://contractcode.io/][contractcode.io]] wrote a [[https://docs.google.com/document/d/1Cun8B6V_CbedxrhW26j0ZfAfcuVKtrVOdg9tY7XR8Lw/edit][white paper]].
6. In 2017, Shrutarshi Basu, Ph.D. candidate at Cornell, wrote a conveyancing reasoner: http://basus.me/conveyor/
7. In 2016 and 2017, William Farmer and Qian Hu at McMaster University produced [[https://link.springer.com/chapter/10.1007%252F978-3-319-56157-8_9][FCL: A Formal Language for Writing Contracts]].

*** European Work

1. In the 2000s, Jean-Marc Eber wrote [[https://www.lexifi.com/files/resources/MLFiPaper.pdf][Composing Contracts: an adventure in financial engineering]]. That paper begat [[https://www.lexifi.com/product/technology/contract-description-language][MLFi]], a domain-specific language for financial contracts. Eber's company, [[https://www.lexifi.com/company][LexiFi]], sells to financial institutions.
2. In 1999, Aspassia-Kaliopi Daskalopulu wrote a PhD thesis at the University of London on [[http://opim.wharton.upenn.edu/~sok/papers/d/AspassiaPhD.pdf][Logic-Based Tools for the Analysis and Representation of Legal Contracts]]; subsequent work explored [[https://arxiv.org/abs/cs/0106009][model checking]].
3. In 2002, [[https://www.computer.org/csdl/proceedings/hicss/2002/1435/07/14350170b.pdf][Using Event Semantics for Modeling Contracts]] came out of the Netherlands.
4. The [[http://www.estrellaproject.org/][Estrella Project]] ran from 2006 to 2008, [[http://www.leibnizcenter.org/][out of Amsterdam]], and produced [[https://github.com/RinkeHoekstra/lkif-core][LKIF]], a legal ontology -- [[http://www.leibnizcenter.org/~winkels/LegalOntologies.html][one of many]]; see [[https://www.amazon.com/Approaches-Legal-Ontologies-Methodologies-Governance/dp/9400734751/][Approaches to Legal Ontologies]]. LKIF stands on the shoulders of [[https://en.wikipedia.org/wiki/Knowledge_Interchange_Format][KIF]] which was a creation of Michael Genesereth at Stanford and others. See papers such as [[http://www.leibnizcenter.org/docs/hoekstra/Hoekstra-LOAIT07.pdf][The LKIF Core Ontology of Basic Legal Concepts]] which probably has some overlap with the [[http://www.estrellaproject.org/doc/D1.4-OWL-Ontology-of-Basic-Legal-Concepts.pdf][OWL Ontology of Basic Legal Concepts]].
5. In 2005, Adrian Paschke at TUM.de (et al) described [[http://rbsla.ruleml.org/docs/37910209.pdf][ContractLog]] to cover SLAs.
6. In 2007, the LegalXML OASIS working group produced the [[http://docs.oasis-open.org/legalxml-econtracts/CS01/legalxml-econtracts-specification-1.0.pdf][eContracts v1.0 specification]].
7. From 2007 to 2010, in Norway, [[http://cosodis.project.ifi.uio.no/][the CoSoDIS project]] begat the contract language CL, under [[http://www.cse.chalmers.se/~gersch/][Schneider]] (in Sweden). Browse [[http://cosodis.project.ifi.uio.no/publications.shtml][publications]]. Particularly, [[https://www.researchgate.net/publication/221027131_Model_Checking_Contracts_-_A_Case_Study][Model Checking Contracts]].
8. *IMPORTANT* -- Chapter 1 of Camilleri's 2015 [[https://gupea.ub.gu.se/bitstream/2077/40725/1/gupea_2077_40725_1.pdf][Analysing Normative Contracts]] briefly surveys the field of computable contracts. The rest of the thesis demonstrates applications of CL: [[http://remu.grammaticalframework.org/contracts/diagrams/][contract-oriented diagrams]] (web), a [[http://remu.grammaticalframework.org/contracts/cnl/][CNL editor]] (web), and [[http://www.cs.um.edu.mt/~svrg/Tools/CLTool/][CLan]] (Java), a contract language analyzer, produced under [[http://remu.grammaticalframework.org/contracts/][the REMU project]], funded by the Swedish Research Council. todo: update the anacon link to match his 2017 PhD thesis.
9. *IMPORTANT* -- Chapter 1 of Hvitved's 2012 [[https://drive.google.com/open?id=0BxOaYa8pqqSwbl9GMWtwVU5HSFU][Contract Formalization]] comprehensively surveys the prior art in contract languages. That chapter describes many efforts not listed here.
10. Chapter 2 introduces Hvitved's language, [[https://drive.google.com/open?id=0BxOaYa8pqqSwbl9GMWtwVU5HSFU][CSL]]. CSL was developed as part of [[http://www.sciencedirect.com/science/article/pii/S156783260800074X][POETS]] under the Danish Advanced Technology Foundation's [[http://web.archive.org/web/20141216182613/http://3gerp.org/][3gERP]] project. The implementation is in Haskell.
11. Starting in the 2000s a Newcastle Group including [[https://scholar.google.com/citations?user=nBgFa0kAAAAJ][Carlos Molina-Jimenez]], Santosh Shrivastava, [[http://hdl.handle.net/10443/1814][Abdelsadiq]] and Ellis Solaiman worked on formalization and model checking. Languages included [[https://drive.google.com/open?id=0BxOaYa8pqqSwbkFhR3BHOEp5cGM]["X-Contracts"]] and EROP.
12. In 2017, [[http://www.cs.bath.ac.uk/smartlaw2017/papers/SmartLaw2017_paper_1.pdf][Eric Tjong Tjin Tai]] from Tilburg, NL, published a short paper, "[[http://www.cs.bath.ac.uk/smartlaw2017/papers/SmartLaw2017_paper_1.pdf][Formalizing Contract Law for Smart Contracts]]".
13. Most contract law concerns itself primarily with deontic logic; but parties must give notice to one another, and we might call that epistemic logic. Some people in Amsterdam have been working on [[https://link.springer.com/chapter/10.1007/978-3-662-48561-3_30][model checking of epistemic logic]].
14. Pace -- [[https://drive.google.com/open?id=1OlYcZOF1s38y4-IidkvM716QqYtYQ9Rl][A Timed Contract Calculus]].

** Prior Art in Regulations, Compliance, and Rules

Contracts are private law; legislation and regulation are public law. Enterprises have internal laws, called Business Rules.

1. Vinay Gupta (2017) motivated computable legislation in his manifesto [[http://internetofagreements.com/][The Internet of Agreements]]: smart contracts need smart law.
2. Ages ago, there was the [[https://drive.google.com/open?id=0BxOaYa8pqqSwVmg2bm9Sc3J2Tmc][BNA as a logic program]].
3. In Australia, [[http://www.governatori.net/research/pubs/index.html][Guido Governatori]] has been doing for legislation what the above efforts do for contracts. http://digital-legislation.net describes computable legislation and regulations; see the [[https://digital-legislation.net/img/concept-map.pdf][marketecture PDF]]. His previous efforts include Regorous and DrContract.
4. [[https://www.unibo.it/sitoweb/monica.palmirani/en][Monica Palmirani]] chairs the [[https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=legalruleml][OASIS committee]] for [[http://www.governatori.net/papers/2013/ruleml2013tutorial.pdf][LegalRuleML]] (2013 tutorial). See the [[https://lists.oasis-open.org/archives/legalruleml/][mailing list archives]].
5. The [[http://mirelproject.eu/index.html][MIREL Project]] (Mining and Reasoning with Legal Texts) kicked off in February 2016 and is going strong.
6. The [[https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=legalxml-econtracts#technical][eContracts]] standard ran from 2000 to 2007.
7. The [[http://web.archive.org/web/20080422234946/http://www.normeinrete.it/][NormeinRete]] project ran from 1999 to 2007, and has produced work such as [[https://www.researchgate.net/publication/260387643_xmLegesEditor_an_OpenSource_Visual_XML_Editor_for_supporting_Legal_National_Standards][xmLegesEditor]], part of the [[http://www.xmleges.org/eng/index.php?option=com_frontpage&Itemid=1][XMLeges]] suite.
8. In Pittsburgh (with Matthias Grabmair), the [[http://dl.acm.org/citation.cfm?id=2746096&dl=ACM&coll=DL&CFID=937658292&CFTOKEN=67801372][LUIMA project]] attempts to extract semantics from regulations. See also [[https://www.researchgate.net/publication/266177190_On_Rule_Extraction_from_Regulations][Adam Wyner]]; and [[http://works.bepress.com/hyun_lee/2/][Applying Software Development Techniques to Statutory Drafting]].
9. [[http://www.akomantoso.org/][Akoma Ntoso]] is a markup XML for legislation.
10. [[https://en.wikipedia.org/wiki/GJXDM][The Global Justice XML Data Model]] is a data reference model for the exchange of information within the justice and public safety communities.
11. The [[http://lov.okfn.org/dataset/lov/about][Linked Open Vocabularies]] project may list a few contract/legal ontologies.

The name for this field is "RegTech".

** Some Software Projects, Companies, and Consortia

1. [[https://www.kentlaw.iit.edu/institutes-centers/center-for-access-to-justice-and-technology/a2j-author][A2JAuthor]] is a software tool that delivers greater access to justice for self-represented litigants by enabling non-technical authors from the courts, clerk's offices, legal services programs, and website editors to rapidly build and implement customer friendly web-based interfaces for document assembly.
2. [[https://en.wikipedia.org/wiki/Business_rules_engine][Business Rules Engines]] have been around forever: [[https://en.wikipedia.org/wiki/Oracle_Policy_Automation][Oracle Policy Automation]] dates back to 2008. [[https://www.neotalogic.com/][Neota Logic]] is a recent entrant. See also [[https://en.wikipedia.org/wiki/Drools][Drools]], [[https://en.wikipedia.org/wiki/Jess_(programming_language)][Jess]], [[https://www-01.ibm.com/software/info/ilog/][iLog]]. IBM Watson's [[http://io9.gizmodo.com/ibms-watson-can-now-debate-its-opponents-1571837847][Debater does a bit of this]].
3. [[http://benjamingrosof.com/][Ben Grosof]]'s company [[http://www.coherentknowledge.com/][Coherent Knowledge]] commercializes Textual RuleLog (a Prolog variant) as Ergo, to reason through regulatory compliance. See 2016 [[variant of Textual R][YouTube demo]] (15m), 2015 [[https://www.slideshare.net/ruleml2012/ruleml2015-tutorial-powerful-practical-semantic-rules-in-rulelog-fundamentals-and-recent-progress][RuleML slides]].
4. [[http://www.r3.com/][R3]] has raised a lot of money. They work with banks, because that's where the money is. They run [[https://www.eventsforce.net/r3/frontend/reg/tAgendaWebsite.csp?pageID=1976&ef_sel_menu=44&eventID=9&mode=&eventID=9][summits on smart contracts]] and have published on smart contract templates: [[https://arxiv.org/abs/1608.00771][foundations]] and [[https://arxiv.org/pdf/1612.04496][requirements]] (2016). See [[https://drive.google.com/file/d/0BxOaYa8pqqSwWTAzS3hjZUlVWUk/view?usp=sharing][slides from June 2016]] and [[https://www.r3.com/slides/third-smart-contract-templates-summit-slides.pdf][June 2017]]. Their demo runs ISDA master templates through an end-to-end proof of concept prototype against a DLT/blockchain.
5. ISDA, the trade association, encourages the use of [[https://www2.isda.org/functional-areas/technology-infrastructure/fpml/][FpML]].

** Prior Art: Non-Computational Contracts

We call this the "document assembly" or "document automation" industry.

*** Commercial efforts

- [[http://www.contractexpress.com/][ContractExpress]] (first website 2002)
- [[http://www.hotdocs.com/][HotDocs]] (first website 1996, software v4.0)
- [[http://www.exari.com/][Exari]] (first website 2006)

*** Opensource Template and Expert Systems

- [[http://commonaccord.org/][CommonAccord]] (started 2001). Compare [[https://en.wikipedia.org/wiki/JavaScript_templating][text templating systems]] like [[http://handlebarsjs.com/][Handlebars]], and the ur-macro language [[https://en.wikipedia.org/wiki/M4_(computer_language)][m4]].
- [[http://commonform.github.io][CommonForm]] (started Feb 2015)
- [[http://docassemble.org/][DocAssemble]] (started Jan 2016)

*** Why aren't template approaches good enough?

- [[https://medium.com/@Legalese/code-is-law-is-code-4492c864f33f][Because you need first-class functions,]] and a formalization that natively supports modal logics in a way that naturally lends itself to formal verification methods.

** Conferences and Books

Skim the proceedings of past conferences.

- FLACOS, the workshop on Formal Languages And Contract-Oriented Software, ran from 2007 to 2012. [[http://flacos07.project.ifi.uio.no/][2007]] ([[http://folk.uio.no/gerardo/report-UiO-366.pdf][proceedings]]), [[http://flacos08.project.ifi.uio.no/][2008]] ([[http://www.cs.um.edu.mt/gordon.pace/Workshops/FLACOS2008/Proceedings.pdf][proceedings]]), [[http://web.archive.org/web/20130118003725/http://www.dsi.uclm.es/retics/flacos09/][2009]] ([[http://www.cs.um.edu.mt/gordon.pace/Research/Papers/flacos2009proceedings.pdf][proceedings]]), [[http://www.sefm2010.isti.cnr.it/workshops_flacos.php][2010]] ([[https://pdfs.semanticscholar.org/a6b8/1666650c9635f52c212a4fb2d481bbc1f02c.pdf][proceedings]]), [[http://flacos11.lcc.uma.es/][2011]] ([[https://arxiv.org/html/1109.2399][proceedings]]), [[http://www.um.edu.mt/ict/flacos2012/][2012]] ([[http://eptcs.web.cse.unsw.edu.au/content.cgi?FLACOS2012][proceedings]]).
- [[https://nms.kcl.ac.uk/icail2017/][ICAIL]] is in its 16th year; see [[http://dl.acm.org/event.cfm?id=RE294&CFID=947570198&CFTOKEN=59975776][past papers]].
- [[http://jurix.nl/][Jurix]] is in its 30th year, run by the Dutch [[https://en.wikipedia.org/wiki/JURIX][Foundation for Legal Knowledge and Information Systems]]. See sample proceedings from [[http://jurix.nl/pdf/j91-02.pdf][1991: isomorphic models of separate rules and exceptions in legislation]] by Henry Prakken.
- summer school: [[https://lawandlogic.org/][Law and Logic]] is a quick intro.
- [[http://www.springer.com/gp/book/9783319195742][Logic in the Theory and Practice of Lawmaking]] is a much longer textbook.
- summer school: [[http://2017.ruleml-rr.org/][RuleML / Rules and Reasoning]]
- summer school: [[http://deepspec.org/events/ss17detail.html][DeepSpec]]

** Researchers

European researchers tend to be CS professors with an interest in law.

US researchers tend to be law professors with an interest in software.

*** European researchers

- [[http://www.cse.chalmers.se/~gersch/][Gerardo Schneider]], CS Professor at the University of Gothenburg, Sweden. (Connected with CL)
- [[http://www.cs.um.edu.mt/gordon.pace/projects.html][Gordon Pace]], Associate CS/ICT Professor at the University of Malta. ([[http://www.cs.um.edu.mt/gordon.pace/publications.html][publications]])
- [[http://www.cse.chalmers.se/~cajohn/][John J. Camilleri]], Ph.D. student at Chalmers University of Technology and the University of Gothenburg, Sweden.
- [[http://www.governatori.net/research/][Guido Governatori]], Senior Principal Researcher at NICTA Queensland, Australia. (Connected with digital-legislation.net)
- [[http://www.eui.eu/DepartmentsAndCentres/Law/People/Professors/Sartor.aspx][Giovanni Sartor]], Professor, Legal Informatics, European University Institute of Florence.
- [[https://www.abdn.ac.uk/ncs/people/profiles/azwyner][Adam Wyner]], Lecturer, University of Aberdeen, focuses on modeling argumentation and legal reasoning.
- [[https://scholar.google.com/citations?user=aPIm2nYAAAAJ][Rinke Hoekstra]], VU University Amsterdam, is the LKIF OWL guy.
- [[https://nms.kcl.ac.uk/peter.mcburney/blockchain.html][Peter McBurney]] at King's College London is interested in blockchain smart contracts.

*** USA!

- [[http://www.harrysurden.com/][Harry Surden]], Colorado Law School. [[http://lawreview.law.ucdavis.edu/issues/46/2/articles/46-2_surden.pdf][Computable Contracts]], 2012
- [[http://www.danielmartinkatz.com/][Daniel Martin Katz]], Illinois Tech - Chicago Kent College of Law. [[https://computationallegalstudies.com/][Computational Legal Studies]], co-founder [[https://lexpredict.com/][LexPredict]].
- [[https://en.wikipedia.org/wiki/John_Henry_Clippinger,_Jr.][John Henry Clippinger]], MIT Media Lab, previously the [[https://cyber.harvard.edu/people/jclippinger][Law Lab]] at Berkman with
- [[http://www.vermontlaw.edu/directory/person?name=Goodenough,Oliver][Oliver Goodenough]], Vermont Law School, co-founder [[https://www.skoposlabs.com/][Skopos Labs]]; co-authored with
- [[http://www.flood-dalton.org/mark/][Mark Flood]], [[http://www.treasury.gov/initiatives/Pages/ofr.aspx][OFR]].
- [[http://www.nyls.edu/faculty/faculty-profiles/faculty_profiles/houman_shadab/][Houman Shadab]], New York Law School, co-founder [[http://clause.io/][clause.io]].
- Thorne McCarty: [[http://digitalcommons.law.msu.edu/lr/vol2016/iss2/5][one]], [[https://www.researchgate.net/publication/316523910_Probability_Geometry_Logic_A_Triptych_for_a_Learnable_Knowledge_Representation_Language][two]], three

** Organizations with related interests

Mostly in the blockchain / smart contracts space.

- Primavera's [[http://coalalex.org/][Coala Lex]] is interested in relating blockchain smart contracts to the incumbent legal system.
- [[https://www.hyperledger.org/][Hyperledger]] comes off the Linux Foundation.
- [[http://www.r3.com/][R3]] was described above.
- [[http://iaail.org/][IAAIL]] is the International Association for Artificial Intelligence and Law. They run the ICAIL conference.
- Vinay Gupta and Rob Knight at [[http://hexayurt.capital/][Hexayurt Capital]] are plotting to realize the vision described at http://www.internetofagreements.com/
- John Armour, Sarah Green, and perhaps others at Oxford are working on something that Meng will learn more about soon.

** Other Resources

Legalese's "[[https://legalese.com/v1.0/page/past][Past]]" page attempts to survey the research.

Legalese's "[[https://legalese.com/v1.0/page/present][Present]]" page shows the subset of today's LegalTech industry landscape related to contracts.

* Volume 2 (one semester) -- Introduction to L4

/This section is under construction./

This volume teaches L4. It will take a few months to get productive.

As a newly fledged legal developer, you will be ready to use the language and its tools to read and write contracts-as-code and legislation-as-code.

You will be able to generate visualizations and operate the verification engine.

You can start contributing to opensource libraries of contract code. Share your work on Github.

** Contents

*** Warm-Ups: Trying Out Some Existing Contract Language Environments

- Visit AnaCon, CL, Clang. Observe C-OD.
- Visit the Basus environment.
- Visit [[https://drive.google.com/open?id=0BxOaYa8pqqSwbl9GMWtwVU5HSFU][CSL]] and POETS.
- You should at least learn SQL.

*** Dynamic Logic Programming and Logic Production Systems

**** prolog and kanren and sat/smt

**** https://pdfs.semanticscholar.org/338b/4318636432299f218d5a702bb3936fc7681f.pdf

**** Epilog
- Epilog.stanford.edu
- worksheets.stanford.edu
- symbium

**** LPS
- lps.doc.ic.ac.uk
- logicalcontracts.com

*** The Be-All and End-All of Contract Languages

**** Introduction to L4.
L4 is basically CL's extensions bolted on top of a CSL core.

**** Using L4 to develop contracts.
Write your first contract.
**** Syntax: Control Flow and Clause Composition
**** Syntax: Rules
**** Syntax: Genre Extensions
financial agreements

startup investments

corporate law

employment agreements

NDAs

ESOPs

conveyancing

maritime agreements

**** Review the contract library.
Jurisdiction customization.
**** Using L4 to develop legislation.
Write your first bill.
Rule defeasibility.
**** Review the statute library.

*** Secondary Weapon Enhancements

**** Automated Bug-Finding.

Introduction to CTL*.

Introduction to TLA+.
http://lamport.azurewebsites.net/tla/book-02-08-08.pdf

Review of Model Checking with CL.

Property verification via model checking.

Conflict detection via model checking.
***** A Bestiary of Standard Bugs

****** Type Errors.
Debt vs Equity.
****** Action Conflicts.
****** Rule Conflicts.
****** Loopholes.
****** Dangling References.
****** Undefined Terms.
****** Inconsistency with Legislation.
****** Model Checking Property Violations.
****** Incompleteness.


**** Multilingual Natural Language Generation.

Introduction to GF.

https://www.youtube.com/watch?v=x1LFbDQhbso

http://www.grammaticalframework.org/~aarne/ud-gf-malta-2017.pdf



***** English Output

***** Italian Output

***** Indonesian Output

***** German Output

https://papers.ssrn.com/sol3/papers.cfm?abstract_id=596668

**** Type Checking.

Sanity checking.

Domain Expressions.

PCSL.

Debt vs Equity example.

**** Visualization. Scenario explorers.

**** Ambiguity.

https://papers.ssrn.com/sol3/papers.cfm?abstract_id=332984

https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1288689

**** Call-Outs to Oracles.



*** Advanced L4

**** The Interpretation Combinator: "It Depends"

**** Ternary Logic: Yes, No, Maybe

**** Building an Expert System in L4

*** Social Implications
[[http://www.theconglomerate.org/2009/11/a-wiki-for-contracts-transactional-lawyers-wanted.html][Github for Contracts]]


* Volume 3 (one to two years) -- Advanced Background

/This section is under construction./

There is enough material in here for a Master's degree. If you go fast, you could cover it all in a year. If you go deep, it might take two.

You will understand the mathematical logic and architectural decisions that inform the design of the L4 language.

You'll be ready to start developing and extending the core language itself, the way Guido van Rossum develops Python, the way Mats develops Ruby, the way DHH developed Rails.

When you attend academic conferences about law and logic, you will be able to follow the arguments of wizards about the fine points of action logics vs state logics; about whether Hvitved loses anything by defining permission in terms of counterparty obligations; about whether CSL, CL, or FL better sidesteps the paradoxes of Standard Deontic Logic; about whether Governatori's defeasible logics map elegantly to SBVR and LegalRuleML.

** Motivation and Problems

- How to be a Genius (vs a Consultant), with thanks to ed kmett.
- three generations of document assembly

** Prior Art: Computational Law Projects

We review the above projects in more detail.

** Prior Art: Rule languages. Declarative Programming.

- https://en.wikipedia.org/wiki/Business_rules_engine
- Governatori: [[https://www.researchgate.net/publication/37617796_Representing_Business_Contracts_in_RuleML][Representing Business Contracts in RuleML]]

** Use Case: terms of service, privacy policies

- [[https://en.wikipedia.org/wiki/Creative_Commons_Rights_Expression_Language][ccREL]] ([[https://www.w3.org/Submission/ccREL/][w3c]])
- [[https://www.w3.org/community/odrl/][ODRL]]
- http://uterms.software/
- http://openminted.eu/
- http://remu.grammaticalframework.org/contracts/ is the index to a lot of work product from REMU including CNL and C-OD
- http://remu.grammaticalframework.org/contracts/converter/
- http://remu.grammaticalframework.org/retreat/2016/ workplan for june 2016 to 2017

** Introduction to Business Modeling

- http://www.omg.org/spec/SBVR/index.htm
- http://www.omg.org/spec/BPMN/index.htm
- http://www.omg.org/spec/CMMN/index.htm
- http://www.omg.org/spec/DMN/
- https://www.slideshare.net/dgagne/bpmncmmndmn-an-intro-to-the-triple-crown-of-process-improvement-standards-denis-gagne
- [[https://en.wikipedia.org/wiki/Object_Constraint_Language][OCL]] is part of [[https://en.wikipedia.org/wiki/Unified_Modeling_Language][UML]]; see [[https://orbilu.uni.lu/bitstream/10993/15339/1/oclr-report.pdf][OCLR]] for temporals
- see also ORM2
  - http://www.meteck.org/files/Meraka170708CMK.pdf
  - https://pdfs.semanticscholar.org/a796/7b504d1fc5eb78669cbe1a9a4151e2cdcb8d.pdf
- conversion of BPMN to natural language: see [[http://www.henrikleopold.com/publications/][Henrik Leopold]]'s [[http://www.henrikleopold.com/downloads/][software]].

** Introduction to Semantic Web
- https://www.w3.org/Submission/SWRL/
- OWL
- CommonRules

** Introduction to Business Rules
- OPA
- Drools / Jess
- iLog
- DataLog / RuleLog / [[http://flora.sourceforge.net/tutorial.html][Flora-2]] / CoherentKnowledge

** Introduction to KRR

Knowledge representation and reasoning

http://www.mirelproject.eu/publications/D1.1.pdf

e.g. the representation of time: http://ceur-ws.org/Vol-1875/paper2.pdf

** Prior Art: Computational Contracts

- Previous Contract Languages. FormaLex, CL, CSL. See [[*A High-Level Survey of Prior Art in Contracts][above]].

** Introduction to Computational Linguistics

- Natural Language Processing. NLTK.
  - spacy.io
  - https://bitbucket.org/coherentknowledge/ergonlp
  - https://www.lexpredict.com/2017/07/03/open-sourcing-contract-analytics-platform/
  - prolog.
- Natural Language Generation.
- Text Planning.
- Introduction to Grammatical Framework.
- https://amr.isi.edu/index.html
- framenet, wordnet, etc.
  - https://framenet2.icsi.berkeley.edu/fnReports/data/frameIndex.xml?frame=Required_event
  - https://framenet2.icsi.berkeley.edu/fnReports/data/frameIndex.xml?frame=Desirable_event

** Introduction to Mathematical Logic

- [[http://repository.cmu.edu/cgi/viewcontent.cgi?article=1923&context=compsci][On the Unusual Effectiveness of Logic in Computer Science]]
- Predicate Logic.
- Modal logics. Kripke structures. Deontic, Epistemic, Temporal, Dynamic Logics.
- Standard Deontic Logic and its paradoxes.
- Defeasible Logic: Governatori. Finite Automata.

** Introduction to Functional Programming.

- Introduction to Functional Programming. haskellbook.com.

** Applications in AI

*** Apollo vs Dionysus
- The [[https://docs.google.com/presentation/d/1xrQebPOlxgnRumPN77fa72wxzvK1m4FOKDOs_03UHP4/pub?start=false&loop=false&delayms=3000][A.I. Dichotomy]]: Symbolic vs Statistical, Logic vs Emotion, Apollo vs Dionysus

*** explainability
- http://clasp.gu.se/news-events/conference-on-logic-and-machine-learning-in-natural-language--laml-/invited-abstracts/aarne-ranta
- http://www.law.nyu.edu/centers/ili/events/algorithms-and-explanations

** Programming Language Theory

- Programming Paradigms.
- Types and Programming Languages.
- Automated Theorem Proving
- Agda, Idris and CoQ
- Dependent Types in Haskell
- Dependent Types in GF

** Model Checking

- Model Checking. CTL* and LCTL. Uppaal. Alloy. [[https://yurichev.com/writings/SAT_SMT_draft-EN.pdf][SAT/SMT]]. [[http://smtlib.cs.uiowa.edu/language.shtml][SMTLIB2]]. Z3.
- VTSA summer school: http://resources.mpi-inf.mpg.de/departments/rg1/conferences/vtsa17/index.html
- SAT/SMT summer school: http://www.sc-square.org/CSA/school/programme.html
- FormaLex

** Our Contribution

- Introduction to Contract Law.
- The Clause Construct.
- The Interpretation Combinator.
- Extending the core language with subdomain expression languages.


* Volume 4 (three to six years) -- Research Directions

After mastering the above subjects, pick an advanced topic and dive in. You may spend several years [[http://matt.might.net/articles/phd-school-in-pictures/][advancing the state of the art]]. For extra credit, move to Northern Europe and attach yourself to one of the professors in the field. You will probably come away with a Ph.D.

- Temporal Issues in Legislative Versioning. Computing legality over time. Introduction to bitemporal databases. Applications to legal scenarios.
- [[http://www.springer.com/gp/book/9783319195742][Logic in the Theory and Practice of Lawmaking]]: textbook. Pre-CS legal scholarship. Legal formalism vs legal realism. Types of rules. Complete vs Incomplete Contracts. Allocation of decision rights under uncertainty: I cut, you choose.
- NLG: Contract drafting. Ken Adams. Tina Stark. Quill. Text planning. [[https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2932333][Interpretive caveats]].

