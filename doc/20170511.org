#+TITLE: yet another effort at the language

* traditional imperative language

#+BEGIN_SRC
  IF (predicate) THEN { block } ELSE { block }
  FOR (variable ; predicate ; change) { block }
  FOR (v IN list) { block }
  WHILE (predicate) { do-block }
  DO { block } WHILE (predicate)
  FUNCTION functionName (arguments) { block }
  GLOBAL variablename TYPE whatever
  LOCAL  variablename TYPE whatever
#+END_SRC

* traditional object oriented language

#+BEGIN_SRC
  Class extends OtherClass
  Class attributename TYPE whatever
  Class methodname    TYPE function

  object = new Class
  object.attribute = ...
  object.method()

  object.setAttr() // idiomatic
  object.getAttr() // idiomatic
#+END_SRC

* typed functional language

#+BEGIN_SRC
class ...
instance ...
type ...
data Type = Constructor1 Product Product | Constructor2 Sum
function fName :: Type -> Type -> Type
fName arg1 arg2 = ...
... map ... fold ... do ... let ... (lambda a b -> a * b) ...
#+END_SRC

* SQL

#+BEGIN_SRC
   SELECT *
     FROM table1 [ JOIN table2 ]
    WHERE predicate
    GROUP BY ... HAVING ...
    ORDER BY ...
    LIMIT ...
#+END_SRC

* Modifying CSL

We remain faithful to CSL's semantics but alter the language syntax to make it look a little more like SQL, because the 1980s gave us Knight Rider, Bladerunner, and SQL.

* L4 OpSpec (Operational Specification)

** Clause Definition

#+BEGIN_SRC

clause-spec ::= must-clause
              | upon-clause
              | elect-clause

-- CSL obligation

must-clause ::=
?            LABEL   labelName:
?       SUBJECT TO   clause-combo
?  NOTWITHSTANDING   clause-combo
?             WHEN   predicate
?            PARTY   p 
!            SHALL   [NOT] action-combo
!            WHERE   action-expression
?         PROVIDED   rule(params)
!           BEFORE   (deadline) REMAINING Z
!            HENCE   clause-spec (args including Z) | FULFILLED
!             LEST   label2 | party BREACH


            LABEL   labelName:

       SUBJECT TO   clause-combo
  NOTWITHSTANDING   clause-combo

             WHEN   predicate
            PARTY   p 
            SHALL   [NOT] action-combo
            WHERE   action-expression

         PROVIDED   rule(params)

           BEFORE   (deadline) REMAINING Z
            HENCE   clause-spec (args including Z) | FULFILLED
             LEST   clause-spec | party BREACH


-- CSL external choice

upon-clause ::=
?            LABEL   labelName:
?       SUBJECT TO   clause-combo
?  NOTWITHSTANDING   clause-combo
?             WHEN   predicate
!             UPON   action-combo
!            WHERE   action-expression
?         PROVIDED   rule(params)
!           BEFORE   (deadline) REMAINING Z
!            HENCE   clause-spec (args including Z) | FULFILLED
!      ELSE | LEST   label2

-- CSL internal choice
?            LABEL   labelName:
?       SUBJECT TO   clause-combo
?  NOTWITHSTANDING   clause-combo
?             WHEN   predicate(params)
!             THEN   clause-spec (args including Z) | FULFILLED
!             ELSE   label2


clause-spec ::= labelName [when]

deadline ::= absolute | relative

action-combo ::= action-spec AND action-combo
               | action-spec OR  action-combo
               | action-spec

action-spec ::= action(params) [ SUCHTHAT predicate(params) ]

#+END_SRC

** Clause Elaboration 

#+BEGIN_SRC

ELABORATE labelName WITH labelName:

#+END_SRC


** Ternary Logic

type Bool3 = Maybe Bool

** Ontology

#+BEGIN_SRC
import LKIF (...)

class | instance | type | data = ...
function fName :: Type -> Type -> Type
fName arg1 arg2 = ...

Action actionName :: { ... } -> Bool3
#+END_SRC


* L4 PoSpec (Policy Specification)

(rule syntax shared with OpSpec)

#+BEGIN_SRC

rule ::=

UNDER CONSTRUCTION LOLOL

#+END_SRC

